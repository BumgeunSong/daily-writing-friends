<context>
# Overview  
DailyWritingFriends의 "Secret Buddy" 기능은 각 활성 사용자(현재 활성 보드가 있는 유저)에게 무작위로 1명의 버디(known buddy)를 할당합니다.  
각 사용자는 자신이 누구의 secret buddy인지 알 수 없으며, 오직 자신의 known buddy만 알 수 있습니다.  
이 기능은 커뮤니티 내 연결감을 높이고, 익명성 기반의 긍정적 상호작용을 유도합니다.

# Core Features  
- **Secret Buddy 1회 배정 스크립트**
  - 현재 활성 보드가 있는 모든 유저(코호트 내 active user) 리스트업
  - 각 유저에게 무작위로 1명의 known buddy를 할당 (자기 자신 제외, 중복 없이)
  - buddy 관계는 **순환(circular) 구조**로, 모든 유저가 한 명의 known buddy를 갖고, 전체적으로 원형으로 연결됨 (예: A→B, B→C, C→A)
  - secret buddy(본인)는 자신의 known buddy 정보를 user document에 저장
    - 필드명: `knownBuddy`
    - 값: `{ uid: string, profilePic: string, nickname: string }`
  - known buddy는 자신을 secret buddy로 둔 사용자를 알 수 없음

- **재사용 가능한 Profile Accessory 컴포넌트**
  - 인스타그램 스타일의 원형 그라데이션 border를 가진 프로필 액세서리 UI를 별도 컴포넌트로 구현
  - 다양한 상황(known buddy, 기타 뱃지 등)에서 재사용 가능하도록 설계

- **KnownBuddyProfileAccessory 컴포넌트**
  - Profile Accessory 컴포넌트를 활용하여, "내 known buddy"임을 시각적으로 표시하는 전용 컴포넌트 구현
  - Board Page 등에서 secret buddy가 자신의 known buddy의 글을 볼 때 적용

- **UserPage 내 Known Buddy 정보 표시**
  - 사용자는 자신의 UserPage에서 본인의 known buddy(닉네임, 프로필 등) 정보를 확인 가능
  - known buddy의 프로필/닉네임 클릭 시 해당 유저 상세 페이지로 이동

- **Board Page 내 Profile Accessory 적용**
  - 게시글 카드에서, secret buddy가 자신의 known buddy의 글을 볼 때, 프로필 사진에 KnownBuddyProfileAccessory 적용
  - 예시 코드:
    ```tsx
    <KnownBuddyProfileAccessory>
      <Avatar ... />
    </KnownBuddyProfileAccessory>
    ```
  - secret buddy만 자신의 known buddy의 글에서 해당 액세서리 UI를 볼 수 있음

# User Experience  
- **대상 사용자**: 현재 활성 보드가 있는 모든 사용자(코호트 내 active user)
- **주요 플로우**:
  1. 1회성 스크립트 실행 → buddy 관계 생성 및 저장(순환 구조)
  2. 사용자는 UserPage에서 자신의 known buddy 정보 확인
  3. Board Page에서 secret buddy가 known buddy의 글을 볼 때, KnownBuddyProfileAccessory로 시각적 표시
- **UI/UX 고려사항**:
  - 모바일 퍼스트, 반응형 디자인
  - 프로필 액세서리는 터치 영역 충분히 확보(최소 44x44px)
  - known buddy 정보는 명확하게 구분, 클릭 시 상세 페이지 이동
  - 로딩/에러 상태 명확하게 표시

</context>
<PRD>
# Technical Architecture  
- **System Components**
  - React + TypeScript + Vite + shadcn UI + Tailwind CSS
  - Firebase Firestore (user document 업데이트)
  - 1회성 Node.js 스크립트로 buddy 관계 생성/저장
- **Data Models**
  - `User`: `{ uid: string, profilePic: string, nickname: string, knownBuddy?: { uid: string, profilePic: string, nickname: string } }`
- **APIs and Integrations**
  - Firestore: `/users/{userId}` 문서에 `knownBuddy` 필드 추가
  - 활성 유저 쿼리: `/boards`에서 활성 보드가 있는 userId 추출 → `/users`에서 해당 userId의 정보 fetch
  - buddy 할당 스크립트: Firestore에서 활성 유저 리스트 fetch → 무작위로 buddy 할당(순환 구조) → 각 user document에 knownBuddy 필드 저장
- **Infrastructure Requirements**
  - 기존 인프라와 동일, 추가 요구사항 없음

# Development Roadmap  
- **MVP**
  1. 활성 유저(활성 보드가 있는 user) 리스트업 로직 구현
  2. buddy 랜덤 순환 할당 알고리즘 구현(자기 자신 제외, 중복 없이 1:1 circular 매칭)
  3. 각 user document에 knownBuddy 필드 저장하는 1회성 스크립트 작성/실행
  4. **ProfileAccessory** 재사용 컴포넌트 구현
  5. **KnownBuddyProfileAccessory** 컴포넌트 구현 및 BoardPage 적용
  6. UserPage에서 known buddy 정보 표시 UI 구현
- **Future Enhancements**
  - buddy 관계 재할당 기능(코호트 변경 시)
  - buddy 간 익명 메시지 기능, 뱃지, 랭킹 등 확장
  - buddy 관계 시각화(네트워크 그래프 등)

# Logical Dependency Chain
- 1) 활성 유저 쿼리 및 데이터 모델 확정
- 2) buddy 랜덤 순환 할당 및 저장 스크립트 구현
- 3) ProfileAccessory/KnownBuddyProfileAccessory 컴포넌트 구현
- 4) UserPage, BoardPage UI/로직 구현
- 5) QA 및 buddy 관계 검증

# Risks and Mitigations  
- **buddy 중복/자기 자신 할당**: 랜덤 순환 할당 알고리즘에서 예외 처리 필수
- **데이터 불일치**: 스크립트 실행 전/후 데이터 백업, 트랜잭션 처리 권장
- **UI/UX 혼동**: 액세서리 UI는 secret buddy만 볼 수 있도록 조건 분기 명확히 구현

# Appendix  
- **진행 현황 요약 (2025-05-21 기준)**
  - 1회성 스크립트, 데이터 모델, UI/UX 요구사항 정의 완료
  - 남은 과제: buddy 할당 스크립트 구현/실행, ProfileAccessory/KnownBuddyProfileAccessory 컴포넌트 구현, UI 통합, QA
  - 차후 작업: buddy 관계 확장, 운영 모니터링, 추가 기능(익명 메시지, 뱃지 등)
- **참고 파일**
  - `allocateSecretBuddy.ts` (1회성 스크립트)
  - `ProfileAccessory.tsx`, `KnownBuddyProfileAccessory.tsx` (컴포넌트)
  - `UserPage.tsx`, `BoardPage.tsx` (UI 구현)
- **기타**
  - buddy 관계는 1회성 할당이 원칙, 코호트 변경 시 재할당 필요
</PRD> 